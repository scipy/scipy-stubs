name: mypy_primer comment

permissions:
  contents: read
  pull-requests: write

on:
  workflow_run:
    workflows: [mypy_primer run]
    types: [completed]

jobs:
  comment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: download diffs
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
            });
            const [matchArtifact] = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == 'primer_diffs'
            });

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            fs.writeFileSync('diff.zip', Buffer.from(download.data));

      - run: unzip diff.zip

      - name: get pr number
        id: pr-number
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            return parseInt(fs.readFileSync('pr_number.txt', {encoding: 'utf8'}))

      - name: hide previous comments
        uses: int128/hide-comment-action@v1.43.0
        with:
          issue-number: ${{ steps.pr-number.outputs.result }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: cat diff_*.txt | tee fulldiff.txt

      - name: post comment
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const MAX_CHARS = 50000
            const MAX_CHARS_PER_PROJECT = MAX_CHARS / 3

            const fs = require('fs')
            let data = fs.readFileSync('fulldiff.txt', {encoding: 'utf8'})

            function maybeTruncate(original, maxLength) {
              if (original.length <= maxLength) {
                return original
              }
              let truncated = original.substring(0, maxLength)
              // further, remove last line that might be truncated
              truncated = truncated.substring(0, truncated.lastIndexOf('\n'))
              let lines_truncated = original.split('\n').length - truncated.split('\n').length
              return `${truncated}\n\n... (truncated ${lines_truncated} lines) ...`
            }

            const projects = data.split('\n\n')
            // don't let one project dominate
            data = projects.map(project => maybeTruncate(project, MAX_CHARS_PER_PROJECT)).join('\n\n')
            // posting comment fails if too long, so truncate
            data = maybeTruncate(data, MAX_CHARS)

            console.log('mypy_primer diffs:')
            console.log(data)

            let body
            if (data.trim()) {
              body = '[mypy_primer](https://github.com/hauntsaninja/mypy_primer) diffs:\n\n'
              body += '```diff\n' + data + '```'
              const prNumber = parseInt(fs.readFileSync('pr_number.txt', {encoding: 'utf8'}))
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }
